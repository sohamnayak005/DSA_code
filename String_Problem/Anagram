Given two strings a and b consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, act and tac are an anagram of each other.

Note:-

If the strings are anagrams you have to return True or else return False

|s| represents the length of string s.


Example 1:

Input:a = geeksforgeeks, b = forgeeksgeeks
Output: YES
Explanation: Both the string have same characters with
        same frequency. So, both are anagrams.
Example 2:

Input:a = allergy, b = allergic
Output: NO
Explanation: Characters in both the strings are 
        not same, so they are not anagrams.
Your Task:
You don't need to read input or print anything. Your task is to complete the function isAnagram() which takes the string a and string b as input parameter and check if the two strings are an anagram of each other. The function returns true if the strings are anagram else it returns false.

Expected Time Complexity:O(|a|+|b|).
Expected Auxiliary Space: O(Number of distinct characters).

Constraints:
1 ≤ |a|,|b| ≤ 105



//code - 1

class Solution
{    
  
    public static boolean isAnagram(String a,String b)
    {
        if(a.length()!=b.length())
        return false;
        char [] a1=a.toCharArray();
        char [] a2=b.toCharArray();
        Arrays.sort(a1);
        Arrays.sort(a2);
        for(int i=0;i<a1.length;i++){
            if(a1[i]!=a2[i])
            return false;
        }
        return true;
        
    }
}

// code - 2
class Solution
{    
    public static boolean isAnagram(String a,String b)
    {
        
        if(a.length()!=b.length())
        return false;
        HashMap<Character,Integer>map=new HashMap<Character,Integer>();
        for(int i=0;i<a.length();i++){
            map.put(a.charAt(i),map.getOrDefault(a.charAt(i),0)+1);
        }
        
        for(int i=0;i<b.length();i++){
            if(map.containsKey(b.charAt(i))&& map.get(b.charAt(i))>0){
                map.put(b.charAt(i),map.get(b.charAt(i))-1);
            }
        }
        for(char e:map.keySet()){
            if(map.get(e)>0)
            return false;
        }
        return true;
        
    }
}

// code - 3
class Solution
{    
    //Function is to check whether two strings are anagram of each other or not.
    public static boolean isAnagram(String a,String b)
    {
        if(a.length()!=b.length())
        return false;
        int [] arr=new int [26];
        for(int i=0;i<a.length();i++){
            arr[a.charAt(i)-97]++;
        }
        for(int i=0;i<b.length();i++){
            arr[b.charAt(i)-97]--;
        }
        for(int i=0;i<=25;i++)
        {
            if(arr[i]>0)
            return false;
        }
        return true;
        
        
    }
}
